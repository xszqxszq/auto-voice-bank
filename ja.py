from vosk import Model, KaldiRecognizer, SetLogLevel
import sys
import os
import wave
import pykakasi
import json
from pydub import AudioSegment

SetLogLevel(0)

if not os.path.exists("vosk-model-small-ja-0.22"):
	print ("Please download the model from https://alphacephei.com/vosk/models and unpack as 'vosk-model-small-ja-0.22' in the current folder.")
	exit (1)

wf = wave.open(sys.argv[1], "rb")
if wf.getnchannels() != 1 or wf.getsampwidth() != 2 or wf.getcomptype() != "NONE":
	print ("Audio file must be WAV format mono PCM.")
	exit (1)

model = Model("vosk-model-small-ja-0.22")
rec = KaldiRecognizer(model, wf.getframerate(), b'["\xe3\x81\x82 \xe3\x81\x84 \xe3\x81\x86 \xe3\x81\x88 \xe3\x81\x8a \xe3\x81\x8b \xe3\x81\x8d \xe3\x81\x8f \xe3\x81\x91 \xe3\x81\x93 \xe3\x81\x95 \xe3\x81\x97 \xe3\x81\x99 \xe3\x81\x9b \xe3\x81\x9d \xe3\x81\x9f \xe3\x81\xa1 \xe3\x81\xa4 \xe3\x81\xa6 \xe3\x81\xa8 \xe3\x81\xaa \xe3\x81\xab \xe3\x81\xac \xe3\x81\xad \xe3\x81\xae \xe3\x81\xaf \xe3\x81\xb2 \xe3\x81\xb5 \xe3\x81\xb8 \xe3\x81\xbb \xe3\x81\xbe \xe3\x81\xbf \xe3\x82\x80 \xe3\x82\x81 \xe3\x82\x82 \xe3\x82\x84 \xe3\x82\x86 \xe3\x82\x88 \xe3\x82\x89 \xe3\x82\x8a \xe3\x82\x8b \xe3\x82\x8c \xe3\x82\x8d \xe3\x82\x8f \xe3\x82\x92 \xe3\x81\x8c \xe3\x81\x8e \xe3\x81\x90 \xe3\x81\x92 \xe3\x81\x94 \xe3\x81\x96 \xe3\x81\x98 \xe3\x81\x9a \xe3\x81\x9c \xe3\x81\x9e \xe3\x81\xa0 \xe3\x81\xa2 \xe3\x81\xa5 \xe3\x81\xa7 \xe3\x81\xa9 \xe3\x81\xb0 \xe3\x81\xb3 \xe3\x81\xb6 \xe3\x81\xb9 \xe3\x81\xbc \xe3\x81\xb3 \xe3\x82\x85 \xe3\x81\xb1 \xe3\x81\xb4 \xe3\x81\xb7 \xe3\x81\xba \xe3\x81\xbd\xe3\x81\x8d\xe3\x82\x83 \xe3\x81\x8d\xe3\x82\x85 \xe3\x81\x8d\xe3\x82\x87 \xe3\x81\x97\xe3\x82\x83 \xe3\x81\x97\xe3\x82\x85 \xe3\x81\x97\xe3\x82\x87 \xe3\x81\xa1\xe3\x82\x83 \xe3\x81\xa1\xe3\x82\x85 \xe3\x81\xa1\xe3\x82\x87 \xe3\x81\xab\xe3\x82\x83 \xe3\x81\xab\xe3\x82\x85 \xe3\x81\xab\xe3\x82\x87 \xe3\x81\xb2\xe3\x82\x83 \xe3\x81\xb2\xe3\x82\x85 \xe3\x81\xb2\xe3\x82\x87 \xe3\x81\xbf\xe3\x82\x83 \xe3\x81\xbf\xe3\x82\x85 \xe3\x81\xbf\xe3\x82\x87 \xe3\x82\x8a\xe3\x82\x83 \xe3\x82\x8a\xe3\x82\x85 \xe3\x82\x8a\xe3\x82\x87 \xe3\x81\x8e\xe3\x82\x83 \xe3\x81\x8e\xe3\x82\x85 \xe3\x81\x8e\xe3\x82\x87 \xe3\x81\x98\xe3\x82\x83 \xe3\x81\x98\xe3\x82\x85 \xe3\x81\x98\xe3\x82\x87 \xe3\x81\xa2\xe3\x82\x83 \xe3\x81\xa2\xe3\x82\x85 \xe3\x81\xa2\xe3\x82\x87 \xe3\x81\xb3\xe3\x82\x83 \xe3\x81\xb3\xe3\x82\x87 \xe3\x81\xb4\xe3\x82\x83 \xe3\x81\xb4\xe3\x82\x85 \xe3\x81\xb4\xe3\x82\x87"]'.decode())
rec.SetWords(True)

workdir = './result/'
if not os.path.exists(workdir):
	os.makedirs(workdir)
kks = pykakasi.kakasi()
kks.setMode('H', 'a')
kks.setMode('K', 'a')
kks.setMode('J', 'a')
kks.setMode('r', 'Hepburn')
threshold = 0.5

def getFilename(kana):
	print(kana)
	path = workdir + kks.getConverter().do(kana)
	cnt = 0
	while True:
		now = path + str(cnt) + '.wav'
		if cnt == 0:
			now = path + '.wav'
		if not os.path.exists(now):
			path = now
			break
		cnt += 1
	return path
while True:
	data = wf.readframes(4000)
	if len(data) == 0:
		break
	if rec.AcceptWaveform(data):
		result = json.loads(rec.Result())
		if result["text"] == "":
			continue
		result = result['result']
		for w in result:
			if w["conf"] > threshold:
				AudioSegment.from_wav(sys.argv[1])[w["start"]*1000:w["end"]*1000].export(getFilename(w["word"]), format='wav')